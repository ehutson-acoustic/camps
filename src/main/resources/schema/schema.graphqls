type Employee {
    id: ID!
    name: String!
    position: String
    team: Team
    department: String
    startDate: DateTime
    manager: Employee
    directReports: [Employee]
    currentRatings: [EngagementRating]
    ratingHistory: [EngagementRating]
    actionItems: [ActionItem]
}

type Team {
    id: ID!
    name: String!
    description: String
    members: [Employee]
}

type EngagementRating {
    id: ID!
    employee: Employee!
    ratingDate: DateTime!
    category: CampsCategory!
    rating: Int!
    notes: String
    createdBy: Employee
    createdAt: DateTime
}

type ActionItem {
    id: ID!
    employee: Employee!
    category: CampsCategory
    description: String!
    createdDate: DateTime!
    dueDate: DateTime
    completedDate: DateTime
    status: ActionStatus!
    outcome: String
    ratingImpact: Int
    createdBy: Employee
    createdAt: DateTime
    updatedAt: DateTime
}

# ========================================
# Enhanced Statistics Types
# ========================================

type StatisticalContext {
    sampleSize: Int!
    standardDeviation: Float
    variance: Float
    confidenceInterval: Float
    isStatisticallySignificant: Boolean!
    significanceLevel: Float
}

type RollingAverages {
    fourWeekAverage: Float
    twelveWeekAverage: Float
    sixMonthAverage: Float
}

type VolatilityIndicators {
    volatilityScore: Float!        # 0-1 scale, 1 being most volatile
    stabilityRating: StabilityRating!
    trendDirection: TrendDirection!
    seasonalityDetected: Boolean!
}

# ========================================
# Separated Trend Data Types (NEW)
# ========================================

type EmployeeTrendData {
    id: ID!
    employee: Employee!
    recordDate: DateTime!
    aggregationPeriod: AggregationPeriod!
    category: CampsCategory!
    averageRating: Float!

    # Change tracking
    weekOverWeekChange: Float
    monthOverMonthChange: Float
    quarterOverQuarterChange: Float
    yearOverYearChange: Float

    # Statistical context
    statisticalContext: StatisticalContext!
    rollingAverages: RollingAverages
    volatilityIndicators: VolatilityIndicators

    # Metadata
    createdAt: DateTime!
    calculatedAt: DateTime!
}

type TeamTrendData {
    id: ID!
    team: Team!
    recordDate: DateTime!
    aggregationPeriod: AggregationPeriod!
    category: CampsCategory!
    averageRating: Float!

    # Change tracking
    weekOverWeekChange: Float
    monthOverMonthChange: Float
    quarterOverQuarterChange: Float
    yearOverYearChange: Float

    # Statistical context
    statisticalContext: StatisticalContext!
    rollingAverages: RollingAverages
    volatilityIndicators: VolatilityIndicators

    # Team-specific metrics
    participationRate: Float!       # Percentage of team members who provided ratings
    teamSize: Int!

    # Metadata
    createdAt: DateTime!
    calculatedAt: DateTime!
}

type TeamStats {
    id: ID!
    team: Team!
    recordDate: DateTime!
    aggregationPeriod: AggregationPeriod!
    category: CampsCategory!
    averageRating: Float!

    # Enhanced statistics
    statisticalContext: StatisticalContext!
    weekOverWeekChange: Float
    monthOverMonthChange: Float

    # Team-specific
    employeeCount: Int!
    participationRate: Float!

    createdAt: DateTime!
}

# ========================================
# Enhanced Category Analysis
# ========================================

type CategoryAverage {
    category: CampsCategory!
    averageRating: Float!
    previousAverageRating: Float
    change: Float
    weekOverWeekChange: Float

    # Statistical rigor
    statisticalContext: StatisticalContext!
    rollingAverages: RollingAverages
    volatilityIndicators: VolatilityIndicators
}

# ========================================
# Weekly Analytics Types
# ========================================

type WeeklyTrendSummary {
    weekStartDate: DateTime!
    weekEndDate: DateTime!
    weekNumber: Int!
    year: Int!

    categoryAverages: [CategoryAverage!]!
    overallTeamAverage: Float!
    participationRate: Float!
    significantChanges: [SignificantChange!]!

    # Week-over-week analysis
    weekOverWeekSummary: WeekOverWeekSummary
}

type WeekOverWeekSummary {
    overallChange: Float!
    improvingCategories: [CampsCategory!]!
    decliningCategories: [CampsCategory!]!
    stableCategories: [CampsCategory!]!
    significantChangesCount: Int!
}

type SignificantChange {
    category: CampsCategory!
    changeType: ChangeType!
    changeMagnitude: Float!
    previousValue: Float!
    currentValue: Float!
    isStatisticallySignificant: Boolean!
    confidenceLevel: Float!
}

# ========================================
# Result Types for Complex Queries
# ========================================

type WeeklyAnalysisResult {
    teamId: ID!
    analysisDate: DateTime!
    weeklyTrends: [WeeklyTrendSummary!]!
    overallTrend: TrendDirection!
    keyInsights: [String!]!
    recommendedActions: [String!]!
    statisticalSummary: StatisticalSummary!
}

type StatisticalSummary {
    averageVolatility: Float!
    mostStableCategory: CampsCategory
    mostVolatileCategory: CampsCategory
    overallConfidenceLevel: Float!
    dataQualityScore: Float!        # Based on participation rates and consistency
}

type CalculationResult {
    success: Boolean!
    message: String
    calculatedRecords: Int
    errors: [String!]
}

# ========================================
# Input Types
# ========================================

input EmployeeInput {
    name: String!
    position: String
    teamId: ID
    department: String
    startDate: DateTime
    managerId: ID
}

input TeamInput {
    name: String!
    description: String
}

input EngagementRatingInput {
    employeeId: ID!
    ratingDate: DateTime!
    category: CampsCategory!
    rating: Int!
    notes: String
}

input ActionItemInput {
    employeeId: ID!
    category: CampsCategory
    description: String!
    createdDate: DateTime!
    dueDate: DateTime
    status: ActionStatus!
}

input DateRangeInput {
    fromDate: DateTime!
    toDate: DateTime!
}

input WeekRangeInput {
    startWeek: Int!     # Week number (1-52)
    endWeek: Int!       # Week number (1-52)
    year: Int!          # Year
}

input TrendAnalysisInput {
    aggregationPeriod: AggregationPeriod!
    includeStatisticalContext: Boolean! = true
    includeVolatilityIndicators: Boolean! = true
    includeRollingAverages: Boolean! = true
}

# ========================================
# Enums
# ========================================

enum CampsCategory {
    CERTAINTY
    AUTONOMY
    MEANING
    PROGRESS
    SOCIAL_INCLUSION
}

enum TimePeriod {
    LAST_WEEK
    LAST_2_WEEKS
    LAST_4_WEEKS
    LAST_30_DAYS
    LAST_90_DAYS
    LAST_6_MONTHS
    LAST_YEAR
    CUSTOM_RANGE
}

enum AggregationPeriod {
    DAILY
    WEEKLY
    MONTHLY
    QUARTERLY
    YEARLY
}

enum ActionStatus {
    PLANNED
    IN_PROGRESS
    COMPLETED
    CANCELLED
}

enum StabilityRating {
    VERY_STABLE
    STABLE
    MODERATE
    VOLATILE
    VERY_VOLATILE
}

enum TrendDirection {
    STRONGLY_INCREASING
    INCREASING
    STABLE
    DECREASING
    STRONGLY_DECREASING
}

enum ChangeType {
    SIGNIFICANT_IMPROVEMENT
    MODERATE_IMPROVEMENT
    STABLE
    MODERATE_DECLINE
    SIGNIFICANT_DECLINE
}

# ========================================
# Queries
# ========================================
type Query {
    # Employee queries
    employees(teamId: ID): [Employee!]!
    employee(id: ID!): Employee

    # Team queries
    teams: [Team!]!
    team(teamId: ID!): Team

    # Rating queries
    ratings(
        employeeId: ID,
        category: CampsCategory,
        dateRange: DateRangeInput
    ): [EngagementRating!]!

    # Current ratings for dashboard
    currentRatings(employeeId: ID): [EngagementRating!]!

    # Team statistics
    teamStats(
        teamId: ID!
        dateRange: DateRangeInput
        aggregationPeriod: AggregationPeriod! = WEEKLY
        trendAnalysis: TrendAnalysisInput
    ): [TeamStats!]!

    teamAverages(
        teamId: ID!
        date: DateTime
        includeStatisticalContext: Boolean! = true
    ): [CategoryAverage!]!

    # Weekly analytics queries
    weeklyTrendSummary(
        teamId: ID!
        weekRange: WeekRangeInput!
    ): [WeeklyTrendSummary!]!

    weeklyTeamAnalysis(
        teamId: ID!
        weeksBack: Int! = 12
        includeStatisticalContext: Boolean! = true
    ): WeeklyAnalysisResult!

    # Enhanced trend queries (separated by type)
    employeeTrends(
        employeeId: ID!,
        category: CampsCategory,
        timePeriod: TimePeriod!,
        dateRange: DateRangeInput,
        trendAnalysis: TrendAnalysisInput
    ): [EmployeeTrendData!]!

    teamTrends(
        teamId: ID!,
        category: CampsCategory,
        timePeriod: TimePeriod!,
        dateRange: DateRangeInput,
        trendAnalysis: TrendAnalysisInput
    ): [TeamTrendData!]!

    # Statistical significance queries
    significantChanges(
        teamId: ID!,
        timePeriod: TimePeriod!,
        minimumSignificanceLevel: Float! = 0.05
    ): [SignificantChange!]!

    # Action items (unchanged)
    actionItems(
        employeeId: ID,
        status: ActionStatus,
        dateRange: DateRangeInput
    ): [ActionItem!]!
}

# ========================================
# Mutations
# ========================================
type Mutation {
    # Employee management
    createEmployee(input: EmployeeInput!): Employee!
    updateEmployee(id: ID!, input: EmployeeInput!): Employee!
    deleteEmployee(id: ID!): Boolean!

    createTeam(input: TeamInput!): Team!
    updateTeam(id: ID!, input: TeamInput!): Team!
    deleteTeam(id: ID!): Boolean!

    # Rating management
    addRating(input: EngagementRatingInput!): EngagementRating!

    # Action item management
    createActionItem(input: ActionItemInput!): ActionItem!
    updateActionItem(id: ID!, input: ActionItemInput!): ActionItem!
    completeActionItem(
        id: ID!,
        completedDate: DateTime!,
        outcome: String,
        ratingImpact: Int
    ): ActionItem!
    cancelActionItem(id: ID!, reason: String): ActionItem!
    deleteActionItem(id: ID!): Boolean!

    # Trend calculation triggers (for admin use)
    recalculateWeeklyTrends(teamId: ID): CalculationResult!
    recalculateStatisticalContext(teamId: ID): CalculationResult!
}

# ========================================
# Custom Scalars
# ========================================
scalar DateTime